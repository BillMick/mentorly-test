// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  MENTOR
  MENTEE
  ADMIN
}

enum Urgency {
  ASAP
  SOON
  FLEXIBLE
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REFUSED
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password_hash String
  role          Role
  is_verified   Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  mentorProfile    MentorProfile?
  menteeProfile    MenteeProfile?
  subscriptions    Subscription[]      @relation("UserSubscriptions")
  sentRequests     MentorshipRequest[] @relation("SentRequests")
  receivedRequests MentorshipRequest[] @relation("ReceivedRequests")
  ratingsGiven     Rating[]            @relation("RatingsGiven")
  ratingsReceived  Rating[]            @relation("RatingsReceived")
}

model MentorProfile {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  fullname           String
  profile_photo      String
  location           String
  languages          String[]
  areas_of_expertise String[]
  experience         String
  diplomas           Json
  certifications     Json
  mentee_levels      String[]
  description        String
  availability       Json
  frequency          String
  price_per_session  Decimal?
}

model MenteeProfile {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  fullname             String
  profile_photo        String?
  location             String
  languages            String[]
  education_level      String
  description          String?
  objectives           String
  subjects_of_interest String[]
  urgency              Urgency
  preferences          String
  budget               Decimal?
}

model SubscriptionPlan {
  id            String  @id @default(uuid())
  name          String
  price_eur     Decimal
  duration_days Int
  is_active     Boolean @default(true)

  subscriptions Subscription[]
}

model Subscription {
  id         String   @id @default(uuid())
  menteeId   String
  planId     String
  start_date DateTime
  end_date   DateTime
  is_active  Boolean  @default(true)

  mentee User             @relation("UserSubscriptions", fields: [menteeId], references: [id])
  plan   SubscriptionPlan @relation(fields: [planId], references: [id])
}

model MentorshipRequest {
  id           String        @id @default(uuid())
  fromMenteeId String
  toMentorId   String
  subject      String
  message      String
  status       RequestStatus @default(PENDING)
  created_at   DateTime      @default(now())
  responded_at DateTime?

  fromMentee User @relation("SentRequests", fields: [fromMenteeId], references: [id])
  toMentor   User @relation("ReceivedRequests", fields: [toMentorId], references: [id])
}

model Rating {
  id         String   @id @default(uuid())
  mentorId   String
  menteeId   String
  rating     Int
  comment    String?
  created_at DateTime @default(now())

  mentor User @relation("RatingsReceived", fields: [mentorId], references: [id])
  mentee User @relation("RatingsGiven", fields: [menteeId], references: [id])
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD/diagram.pdf"
}
